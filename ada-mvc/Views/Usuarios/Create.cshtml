@model ada_mvc.Usuarios

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .ocultar {
        display: none;
    }
</style>
<h2>Crear nuevo usuario</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        @*<h4>Usuarios</h4>*@
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Nombre, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Apellido, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Apellido, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Apellido, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Cargo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Cargo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Cargo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RolDeAcceso, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.RolDeAcceso, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RolDeAcceso, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
            <div style="display: flex; justify-content: flex-start; gap: 10px;" class="col-md-10">
                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                <label id="labelMessage" style="padding: 0px 1rem; margin-top: 1rem;" class="btn-default">Mínimo 8 carácteres de longitud, debe contener mayúsculas y minúsculas</label>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Observacion, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Observacion, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Observacion, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input id="save" type="submit" value="Crear" class="ocultar" />
            </div>
        </div>
    </div>
    <script>
        let password = document.getElementById("Password");
        let labelMessage = document.getElementById("labelMessage");
        let button = document.getElementById("save");       
        password.setAttribute("type", "password");
        
        function validatePassword() {
            var errors = [];
            if (password.value.length < 8) {
                labelMessage.innerHTML = "Debe ser mayor a 8 carácteres,";
                labelMessage.setAttribute("class", "btn-danger");
                errors.push(labelMessage.textContent);
            }
            if (password.value.search(/[A-Z]/) < 0) {
                labelMessage.innerHTML = "Debe contener mayúsculas,";
                labelMessage.setAttribute("class", "btn-danger");
                password.focus();
                errors.push(labelMessage.textContent);
            }
            if (password.value.search(/[a-z]/) < 0) {
                labelMessage.innerHTML = "Debe contener minúsculas,";
                labelMessage.setAttribute("class", "btn-danger");
                password.focus();
                errors.push(labelMessage.textContent);
            }
            if (password.value.search(/[0-9]/) < 0) {
                labelMessage.innerHTML = "Debe contener al menos 1 digito,";
                labelMessage.setAttribute("class", "btn-danger");
                password.focus();
                errors.push(labelMessage.textContent);
            }
            if (errors.length > 0) {
                labelMessage.innerHTML = errors.join("\n");
                labelMessage.setAttribute("class", "btn-danger");
                button.setAttribute("class", "ocultar");
                return false;
            } else {
                labelMessage.innerHTML = "Contraseña es segura";
                labelMessage.setAttribute("class", "btn-success");
                button.setAttribute("class", "btn btn-default");
            }
            return true;
        }
        password.addEventListener("change", () => {
            validatePassword();
        })
    </script>
}

<div class="btn btn-default">
    @Html.ActionLink("Regresar", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
